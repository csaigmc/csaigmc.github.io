{"version":3,"sources":["../node_modules/@material-ui/core/esm/SvgIcon/SvgIcon.js","../node_modules/@material-ui/core/esm/internal/svg-icons/createSvgIcon.js","components/Notifications/AddStudent.js"],"names":["forwardRef","props","ref","children","classes","className","_props$color","color","_props$component","component","Component","_props$fontSize","fontSize","htmlColor","titleAccess","_props$viewBox","viewBox","other","createElement","root","concat","capitalize","focusable","role","muiName","withStyles","theme","userSelect","width","height","display","fill","flexShrink","typography","pxToRem","transition","transitions","create","duration","shorter","colorPrimary","palette","primary","main","colorSecondary","secondary","colorAction","action","active","colorError","error","colorDisabled","disabled","fontSizeInherit","fontSizeSmall","fontSizeLarge","name","createSvgIcon","path","displayName","memo","ADD_STUDENT","gql","useStyles","makeStyles","background","red","success","green","AddStudent","useState","roll_no","first_name","last_name","country_code","phone_no","father_name","mother_name","formValue","setFormValue","handleChange","e","target","value","useMutation","addStudentDetails","sup","setLoading","usePageLoadingContext","shouldShow","setShouldShow","message","setMessage","showingMessage","setShowingMessage","useEffect","loading","handleSubmit","variables","student","container","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","includes","item","xs","style","textAlign","fontFamily","variant","paddingTop","paddingBottom","onSubmit","spacing","fullWidth","label","onChange","placeholder","md","onClick"],"mappings":"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","file":"static/js/18.75f715d7.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      userSelect: 'none',\n      width: '1em',\n      height: '1em',\n      display: 'inline-block',\n      fill: 'currentColor',\n      flexShrink: 0,\n      fontSize: theme.typography.pxToRem(24),\n      transition: theme.transitions.create('fill', {\n        duration: theme.transitions.duration.shorter\n      })\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"action\"`. */\n    colorAction: {\n      color: theme.palette.action.active\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `color=\"disabled\"`. */\n    colorDisabled: {\n      color: theme.palette.action.disabled\n    },\n\n    /* Styles applied to the root element if `fontSize=\"inherit\"`. */\n    fontSizeInherit: {\n      fontSize: 'inherit'\n    },\n\n    /* Styles applied to the root element if `fontSize=\"small\"`. */\n    fontSizeSmall: {\n      fontSize: theme.typography.pxToRem(20)\n    },\n\n    /* Styles applied to the root element if `fontSize=\"large\"`. */\n    fontSizeLarge: {\n      fontSize: theme.typography.pxToRem(35)\n    }\n  };\n};\nvar SvgIcon = React.forwardRef(function SvgIcon(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'inherit' : _props$color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'svg' : _props$component,\n      _props$fontSize = props.fontSize,\n      fontSize = _props$fontSize === void 0 ? 'default' : _props$fontSize,\n      htmlColor = props.htmlColor,\n      titleAccess = props.titleAccess,\n      _props$viewBox = props.viewBox,\n      viewBox = _props$viewBox === void 0 ? '0 0 24 24' : _props$viewBox,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"fontSize\", \"htmlColor\", \"titleAccess\", \"viewBox\"]);\n\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, className, color !== 'inherit' && classes[\"color\".concat(capitalize(color))], fontSize !== 'default' && classes[\"fontSize\".concat(capitalize(fontSize))]),\n    focusable: \"false\",\n    viewBox: viewBox,\n    color: htmlColor,\n    \"aria-hidden\": titleAccess ? 'false' : 'true',\n    role: titleAccess ? 'img' : 'presentation',\n    ref: ref\n  }, other), children, titleAccess ? React.createElement(\"title\", null, titleAccess) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? SvgIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Node passed into the SVG element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.\n   */\n  color: PropTypes.oneOf(['action', 'disabled', 'error', 'inherit', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   */\n  fontSize: PropTypes.oneOf(['default', 'inherit', 'large', 'small']),\n\n  /**\n   * Applies a color attribute to the SVG element.\n   */\n  htmlColor: PropTypes.string,\n\n  /**\n   * The shape-rendering attribute. The behavior of the different options is described on the\n   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\n   * If you are having issues with blurry icons you should investigate this property.\n   */\n  shapeRendering: PropTypes.string,\n\n  /**\n   * Provides a human-readable title for the element that contains it.\n   * https://www.w3.org/TR/SVG-access/#Equivalent\n   */\n  titleAccess: PropTypes.string,\n\n  /**\n   * Allows you to redefine what the coordinates without units mean inside an SVG element.\n   * For example, if the SVG element is 500 (width) by 200 (height),\n   * and you pass viewBox=\"0 0 50 20\",\n   * this means that the coordinates inside the SVG will go from the top left corner (0,0)\n   * to bottom right (50,20) and each unit will be worth 10px.\n   */\n  viewBox: PropTypes.string\n} : void 0;\nSvgIcon.muiName = 'SvgIcon';\nexport default withStyles(styles, {\n  name: 'MuiSvgIcon'\n})(SvgIcon);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport SvgIcon from '../../SvgIcon';\nexport default function createSvgIcon(path, displayName) {\n  var Component = React.memo(React.forwardRef(function (props, ref) {\n    return React.createElement(SvgIcon, _extends({}, props, {\n      ref: ref\n    }), path);\n  }));\n\n  if (process.env.NODE_ENV !== 'production') {\n    Component.displayName = \"\".concat(displayName, \"Icon\");\n  }\n\n  Component.muiName = SvgIcon.muiName;\n  return Component;\n}","import React, { useState, useEffect } from 'react'\r\nimport 'assets/css/theme.css'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { usePageLoadingContext } from 'context'\r\nimport gql from 'graphql-tag'\r\nimport { Grid, Snackbar, TextField, Typography, Button, SnackbarContent, FormControl, FormHelperText } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/styles'\r\nimport {green, red} from '@material-ui/core/colors'\r\nimport { Footer } from 'components/Footer/Footer'\r\n\r\nconst InputBox = ({label, value, onChange, name, placeholder}) => {\r\n    return (\r\n        <div className=\"row\">\r\n        <div className=\"col-12 px-0 bg-primary-light\">\r\n            <label className=\"px-2 py-0 font-head\" style={{fontSize: \"14px\"}}>{label}</label>\r\n            <div>\r\n                <input className=\"input px-2 pb-1\" style={{width: \"100%\", background: \"transparent\"}} type=\"text\" value={value} onChange={onChange} name={name} />\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ADD_STUDENT = gql`\r\nmutation AddStudent($student: InpStudent!) {\r\n    addStudent(student: $student) {\r\n        _id\r\n        roll_no\r\n        first_name\r\n        last_name\r\n        country_code\r\n        phone_no\r\n        father_name\r\n        mother_name\r\n        create_date\r\n    }\r\n}\r\n`\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    error: {\r\n        background: red[800],\r\n        color: red[200]\r\n    },\r\n    success: {\r\n        background: green[800],\r\n        color: green[200]\r\n    }\r\n}))\r\n\r\nconst AddStudent = () => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const [formValue, setFormValue] = useState({\r\n        roll_no: \"\",\r\n        first_name: \"\",\r\n        last_name: \"\",\r\n        country_code: \"\",\r\n        phone_no: \"\",\r\n        father_name: \"\",\r\n        mother_name:\"\"\r\n    })\r\n\r\n    const handleChange = (e) => {\r\n        setFormValue({\r\n            ...formValue,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    } \r\n\r\n    const [addStudentDetails, sup] = useMutation(ADD_STUDENT)\r\n    const {setLoading} = usePageLoadingContext()\r\n    const [shouldShow, setShouldShow] = useState(false)\r\n    const [message, setMessage] = useState(\"Dummy Text\")\r\n    const [showingMessage, setShowingMessage] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if(addStudentDetails && sup.loading == false && shouldShow === true){\r\n            setMessage(sup.error ? \"Error Adding Details. Make sure all the details are valid!\" : \"Added Student Details\")\r\n            setShowingMessage(true)\r\n            setLoading(false)\r\n        } \r\n    }, [sup.loading])\r\n\r\n    const handleSubmit = () => {\r\n        setShowingMessage(false)\r\n        setLoading(true)\r\n        setShouldShow(true)\r\n        addStudentDetails({\r\n            variables: {student: formValue}\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Grid container>\r\n            <Snackbar anchorOrigin={{vertical: \"top\", horizontal: \"right\"}} open={showingMessage} autoHideDuration={1000} onClose={() => setShowingMessage(false)}>\r\n                <SnackbarContent \r\n                 message={message}\r\n                 className={message.includes('Error') ? classes.error : classes.success}/>\r\n            </Snackbar>\r\n            <Grid item xs={12} style={{textAlign: \"center\", fontFamily: \"Comfortaa, sans-serif\"}}>\r\n                <Typography variant=\"h5\" style={{paddingTop: \"12px\", paddingBottom: \"12px\"}}>Student Form</Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n            <form onSubmit={handleSubmit}>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={12}>\r\n                <TextField \r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    label=\"Roll No\"\r\n                    value={formValue.roll_no}\r\n                    onChange={handleChange}\r\n                    name=\"roll_no\"\r\n                    placeholder=\"Roll No\"/>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <TextField \r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"First Name\"\r\n                        value={formValue.first_name}\r\n                        onChange={handleChange}\r\n                        name=\"first_name\"/>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Last Name\"\r\n                        value={formValue.last_name}\r\n                        onChange={handleChange}\r\n                        name=\"last_name\"\r\n                        placeholder=\"Last Name\"/>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                <TextField\r\n                    fullWidth \r\n                    variant='outlined'\r\n                    label=\"Country Code\"\r\n                    value={formValue.country_code}\r\n                    onChange={handleChange}\r\n                    name=\"country_code\"\r\n                    placeholder=\"Country Code\"/>\r\n                </Grid>\r\n                <Grid item xs={10} >\r\n                    <FormControl fullWidth>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\" \r\n                        label=\"Phone No\"\r\n                        value={formValue.phone_no}\r\n                        onChange={handleChange}\r\n                        name=\"phone_no\"\r\n                        placeholder=\"Phone No\"/>\r\n                        <FormHelperText>Phone number must be 10 digits long.</FormHelperText>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                <TextField \r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    label=\"Father's Name\"\r\n                    value={formValue.father_name}\r\n                    onChange={handleChange}\r\n                    name=\"father_name\"\r\n                    placeholder=\"Father Name\"/>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                <TextField \r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    label=\"Mother's Name\"\r\n                    value={formValue.mother_name}\r\n                    onChange={handleChange}\r\n                    name=\"mother_name\"\r\n                    placeholder=\"Mother Name\"/>\r\n                </Grid>\r\n                <Grid xs={12} style={{paddingTop: \"16px\"}}>\r\n                    <Button variant=\"contained\" onClick={() => handleSubmit()}>Submit</Button>\r\n                </Grid>\r\n                </Grid>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddStudent"],"sourceRoot":""}