{"version":3,"sources":["components/Complaints/SearchComplaints.js"],"names":["SEARCH_COMPLAINT_QUERY","gql","useStyles","makeStyles","theme","searchbar","background","palette","primary","dark","borderTopLeftRadius","spacing","borderBottomLeftRadius","paddingLeft","paddingTop","paddingBottom","search","borderTopRightRadius","borderBottomRightRadius","textAlign","color","grey","paddingRight","secondary","main","error","fontFamily","FONTS_HEAD","complaint_data","marginBottom","padding","marginTop","border","complaintText","SearchComplaints","useState","value","setValue","console","log","ToRender","useLazyQuery","variables","id","searchQuery","res","classes","setLoading","usePageLoadingContext","useEffect","called","loading","data","complaint","undefined","container","item","xs","className","variant","complaint_status","style","_id","complaint_message","create_date","date","Date","setTime","day","getUTCDate","mon","getMonth","year","getFullYear","dateFormatter","fullWidth","onChange","e","target","name","placeholder","onClick"],"mappings":"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","file":"static/js/22.5986067e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { usePageLoadingContext } from 'context'\r\nimport { useLazyQuery } from '@apollo/react-hooks'\r\nimport { Grid, InputBase, makeStyles, IconButton, Icon, Typography } from '@material-ui/core'\r\nimport { FONTS_HEAD } from 'App'\r\n\r\nconst SEARCH_COMPLAINT_QUERY = gql`\r\nquery searchComplaint($id: ID!) {\r\n    complaint(id: $id) {\r\n        _id\r\n        complaint_status\r\n        complaint_message\r\n        create_date\r\n    }\r\n}\r\n`\r\n\r\nconst useStyles = makeStyles(theme=> ({\r\n    searchbar: {\r\n        background: theme.palette.primary.dark,\r\n        borderTopLeftRadius: theme.spacing(10),\r\n        borderBottomLeftRadius: theme.spacing(10),\r\n        paddingLeft: theme.spacing(2),\r\n        paddingTop: theme.spacing(1),\r\n        paddingBottom: theme.spacing(1)\r\n    },\r\n    search: {\r\n        background: theme.palette.primary.dark,\r\n        borderTopRightRadius: theme.spacing(10),\r\n        borderBottomRightRadius: theme.spacing(10),\r\n        textAlign: \"right\",\r\n        color: theme.palette.grey[400],\r\n        paddingTop: 10,\r\n        paddingBottom: theme.spacing(1),\r\n        paddingRight: theme.spacing(2),\r\n        '&:hover': {\r\n            color: theme.palette.secondary.main,\r\n        }\r\n    },\r\n    error: {\r\n        paddingTop: theme.spacing(2),\r\n        paddingBottom: theme.spacing(2),\r\n        textAlign: 'center',\r\n        fontFamily: FONTS_HEAD,\r\n        color: theme.palette.grey[500]\r\n    },\r\n    complaint_data: {\r\n        marginBottom: theme.spacing(2),\r\n        padding: theme.spacing(2),\r\n        marginTop: theme.spacing(2),\r\n        border: `1px solid ${theme.palette.grey[500]}`,\r\n        color: theme.palette.grey[200]\r\n    },\r\n    complaintText: {\r\n        fontFamily: FONTS_HEAD,\r\n    }\r\n}))\r\n\r\nconst dateFormatter = (create_date) => {\r\n    const date = new Date()\r\n    date.setTime(create_date)\r\n    const day = date.getUTCDate()\r\n    const mon = date.getMonth() + 1\r\n    const year = date.getFullYear()\r\n    const fdate = `${mon}/${day}/${year}`\r\n    return fdate\r\n}\r\n\r\nconst SearchComplaints = () => {\r\n\r\n    const [value, setValue] = useState(\"\")\r\n\r\n    console.log(value)\r\n\r\n    const [searchQuery, res] = useLazyQuery(\r\n        SEARCH_COMPLAINT_QUERY,\r\n        {\r\n            variables: {\r\n                id: value\r\n            }\r\n        }\r\n    )\r\n    const classes = useStyles()\r\n    const {setLoading} = usePageLoadingContext()\r\n\r\n    useEffect(() => {\r\n        if(res.called && res.loading){\r\n            setLoading(true)\r\n        } else if(res.loading === false) {\r\n            setLoading(false)\r\n        }\r\n    }, [res.loading])\r\n\r\n    console.log(res.data)\r\n    console.log(res.error)\r\n\r\n    let ToRender\r\n    if(res.error || res.data == null || res.data.complaint == null || res.data == undefined || res.data.complaint == undefined){\r\n        ToRender = (\r\n            <Grid container>\r\n                <Grid item xs={12} className={classes.error}>\r\n                <Typography variant=\"h5\">\r\n                    \\_[^_^]_/ <br />\r\n                    Not Found\r\n                </Typography>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    } else if(res.data) {\r\n        let color\r\n        switch (res.data.complaint.complaint_status) {\r\n            case 'pending':\r\n                color = '#b71c1c40'\r\n                break;\r\n            case 'inprogress':\r\n                color = '#ffa00040'\r\n                break;\r\n            case 'resolved':\r\n                color = '#255d0040'\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        ToRender = (\r\n            <Grid container>\r\n                <Grid item xs={12} className={classes.complaint_data} style={{background: color}}>\r\n                    <Typography className={classes.complaintText}>ID: {res.data.complaint._id}</Typography>\r\n                    <Typography className={classes.complaintText}>STATUS: {res.data.complaint.complaint_status}</Typography>\r\n                    <Typography className={classes.complaintText}>COMPLAINT: {res.data.complaint.complaint_message}</Typography>\r\n                    <Typography className={classes.complaintText}>ADDED ON: {dateFormatter(res.data.complaint.create_date)}</Typography>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={11}>\r\n                <InputBase\r\n                    fullWidth\r\n                    value={value}\r\n                    onChange={(e) => setValue(e.target.value)}\r\n                    name=\"id\"\r\n                    className={classes.searchbar}\r\n                    placeholder=\"Search Complaint ID...\"\r\n                 />\r\n            </Grid>\r\n            <Grid item xs={1} className={classes.search}>\r\n                <Icon onClick={() => {\r\n                    searchQuery()\r\n                }}>search</Icon>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                {ToRender}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default SearchComplaints"],"sourceRoot":""}