{"version":3,"sources":["components/Displayer.js","components/Clubs/Memers.js"],"names":["infoStyles","makeStyles","theme","infoContainer","padding","spacing","borderRadius","overflow","transition","backgroundColor","palette","primary","dark","imazo","width","height","objectFit","breakpoints","down","info","fontFamily","FONTS_HEAD","fontSize","color","grey","subinfo","InfoCard","showInfo","classes","item","xs","sm","md","className","src","url_path","container","style","paddingTop","variant","creator","about_creator","DisplayStyle","notFound","paddingBottom","Displayer","ToRender","queryObject","shouldDisplayInfo","useQuery","query_query","variables","options","skip","limit","type","query_params","data","error","loading","fetchMore","setLoading","usePageLoadingContext","useEffect","textAlign","response","items","allArts","map","index","key","result","i","length","ti","j","push","makeResponse","console","log","dataLength","loader","hasMore","next","Math","floor","updateQuery","prev","fetchMoreResult","Object","assign","feed","query_table_name","ADVISORY_QUERY","gql","Memers","query_tablename"],"mappings":"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","file":"static/js/15.e2ecd94c.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\nimport { usePageLoadingContext } from 'context'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport { Grid, Typography } from '@material-ui/core'\r\nimport { FONTS_HEAD } from 'App'\r\nimport { makeStyles } from '@material-ui/styles'\r\n\r\nconst infoStyles = makeStyles(theme => ({\r\n    infoContainer: {\r\n        padding: theme.spacing(1),\r\n        borderRadius: \"4px\",\r\n        overflow: \"hidden\",\r\n        transition: \"0.14s backgroundColor ease-in-out\",\r\n        \"&:hover\": {\r\n            backgroundColor: theme.palette.primary.dark\r\n        }\r\n    },\r\n    imazo: {\r\n        width: '100%',\r\n        height: \"240px\",\r\n        objectFit: \"contain\",\r\n        [theme.breakpoints.down('md')]: {\r\n            height: '180px',\r\n        }\r\n    },\r\n    info: {\r\n        fontFamily: FONTS_HEAD,\r\n        fontSize: '16px',\r\n        color: theme.palette.grey[100]\r\n    },\r\n    subinfo: {\r\n        fontFamily: FONTS_HEAD,\r\n        fontSize: '12px',\r\n        color: theme.palette.grey[400]        \r\n    }\r\n}))\r\n\r\nconst InfoCard = ({showInfo, info}) => {\r\n\r\n    const classes = infoStyles()\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6} md={4} className={classes.infoContainer}>\r\n            <img className={classes.imazo} src={info.url_path} />\r\n            {\r\n                showInfo ? <Grid container>\r\n                    <Grid item xs={12} style={{paddingTop: \"8px\"}}>\r\n                        <Typography variant=\"h6\" className={classes.info}>\r\n                            {info.creator}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"subtitle1\" className={classes.subinfo}>\r\n                            {info.about_creator}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid> : null\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nconst LIMIT = 12\r\nconst STEPPER = 4\r\n\r\nconst DisplayStyle = makeStyles(theme => ({\r\n    notFound: {\r\n        color: theme.palette.grey[600],\r\n        paddingTop: theme.spacing(5),\r\n        paddingBottom: theme.spacing(5)\r\n    }\r\n}))\r\n\r\nexport const Displayer = ({queryObject, shouldDisplayInfo}) => {\r\n\r\n    const classes = DisplayStyle()\r\n\r\n    const {data, error, loading, fetchMore} = useQuery(queryObject.query_query, {\r\n        variables: {\r\n            options: {\r\n                skip: 0,\r\n                limit: LIMIT,\r\n                type: queryObject.query_params\r\n            }\r\n        }\r\n    })\r\n    const {setLoading} = usePageLoadingContext()\r\n\r\n    useEffect(() => {\r\n        if(loading === true) {\r\n            setLoading(true)\r\n        } else if(loading === false) {\r\n            setLoading(false)\r\n        }\r\n    }, [loading])\r\n\r\n    let ToRender\r\n    const makeResponse = () => {\r\n        const items = data.allArts.map((item, index) => {\r\n            return (\r\n                <InfoCard showInfo={shouldDisplayInfo} info={item} key={index}/>\r\n            )\r\n        })\r\n        const result = []\r\n        for(let i = 0; i < data.allArts.length; i+=STEPPER){\r\n            const ti = []\r\n            for(let j = 0; j < STEPPER && (i + j) < data.allArts.length; ++j){\r\n                ti.push(items[i+j])\r\n            }\r\n            result.push(<Grid container>{ti}</Grid>)\r\n        }\r\n        \r\n        return result\r\n    }\r\n\r\n    if(loading) {\r\n        ToRender = (\r\n            <Grid container className={classes.notFound}>\r\n                <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                    <Typography variant=\"h4\">Loading...</Typography>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n    else if(error) {\r\n        ToRender = <div>Error</div>\r\n    }\r\n    else if(data) {\r\n        const response = makeResponse()\r\n\r\n        console.log(response)\r\n        if(response.length === 0){\r\n            ToRender = (\r\n                <Grid container className={classes.notFound}>\r\n                    <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                        <Typography variant=\"h4\">\r\n                            -\\_(^_^)_/- <br /><br />\r\n                            Nothing Found\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            )\r\n        } else {\r\n            ToRender = (\r\n                <>\r\n                    <InfiniteScroll\r\n                        dataLength={response.length}\r\n                        loader={<div>Loading</div>}\r\n                        hasMore={data.length % LIMIT !== 0 ? false : true}\r\n                        next={() => fetchMore({\r\n                            variables: {\r\n                                skip: Math.floor(data.length / LIMIT),\r\n                                limit: LIMIT,\r\n                                type: queryObject.query_params\r\n                            }, updateQuery: (prev, { fetchMoreResult }) => {\r\n                                if (!fetchMoreResult) return prev;\r\n                                return Object.assign({}, prev, {\r\n                                feed: [...prev[queryObject.query_table_name], ...fetchMoreResult[queryObject.query_table_name]]\r\n                                });\r\n                            }\r\n                        })}>\r\n                        {response}\r\n                    </InfiniteScroll>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {ToRender}\r\n        </>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\nimport { usePageLoadingContext } from 'context'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport { Displayer } from 'components/Displayer'\r\nimport { Grid } from '@material-ui/core'\r\n\r\nconst ADVISORY_QUERY = gql`\r\nquery allAdvisory($options: InpOptions) {\r\n    allArts(options: $options) {\r\n        _id\r\n        creator\r\n        about_creator\r\n        url_path\r\n    }\r\n}\r\n`\r\nconst Memers = () => {\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <Displayer\r\n                    queryObject={{\r\n                        query_query: ADVISORY_QUERY,\r\n                        query_params: \"meme\",\r\n                        query_tablename: \"allArts\"\r\n                    }}\r\n                    shouldDisplayInfo={true}/>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Memers"],"sourceRoot":""}