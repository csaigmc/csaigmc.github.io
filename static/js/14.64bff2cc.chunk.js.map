{"version":3,"sources":["components/Loaders.js/ImageLoader.js","components/Displayer.js","components/Clubs/Memers.js"],"names":["itemStyles","makeStyles","t","item","background","palette","primary","dark","borderRadius","marginTop","marginBottom","width100","width","width60","width50","width20","width10","height196","height","breakpoints","down","height20","Item","c","className","ImageLoader","Grid","container","style","padding","xs","md","infoStyles","theme","infoContainer","spacing","overflow","transition","backgroundColor","imazo_gal","imazo","objectFit","info","fontFamily","FONTS_HEAD","fontSize","color","textColor","main","subinfo","UserInfoCard","showInfo","classes","console","log","sm","src","url_path","paddingTop","Typography","variant","user","about_user","phone_no","email","InfoCard","creator","about_creator","DisplayStyle","notFound","grey","paddingBottom","loading_display","Displayer","ToRender","queryObject","shouldDisplayInfo","showContactInfo","useState","hasMore","setHasMore","useQuery","query_query","variables","options","skip","limit","type","query_params","data","error","loading","fetchMore","setLoading","usePageLoadingContext","useEffect","query_tablename","length","response","items","map","index","key","result","i","ti","j","push","makeResponse","textAlign","dataLength","loader","endMessage","next","res","Math","floor","updateQuery","prev","fetchMoreResult","ADVISORY_QUERY","gql","Memers"],"mappings":"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","file":"static/js/14.64bff2cc.chunk.js","sourcesContent":["import React from 'react'\r\nimport { makeStyles, Grid } from '@material-ui/core'\r\n\r\nconst itemStyles = makeStyles(t => ({\r\n    item: {\r\n        background: `${t.palette.primary.dark}8f`,\r\n        borderRadius: \"8px\",\r\n        marginTop: \"8px\",\r\n        marginBottom: \"8px\"\r\n    },\r\n    width100: {\r\n        width: \"100%\"\r\n    },\r\n    width60: {\r\n        width: \"60%\"\r\n    },\r\n    width50: {\r\n        width: \"50%\"\r\n    },\r\n    width20: {\r\n        width: \"20%\"\r\n    },\r\n    width10: {\r\n        width: \"10%\"\r\n    },\r\n    height196: {\r\n        height: \"156px\",\r\n        [t.breakpoints.down('sm')]: {\r\n            height: \"128px\"\r\n        }\r\n    },\r\n    height20: {\r\n        height: \"20px\",\r\n    }\r\n}))\r\n\r\nconst Item = () => {\r\n\r\n    const c = itemStyles()\r\n\r\n    return (\r\n        <>\r\n            <div className={`${c.item} ${c.height196} ${c.width100}`} />\r\n            <div className={`${c.item} ${c.height20} ${c.width50}`} />\r\n            <div className={`${c.item} ${c.height20} ${c.width60}`} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport const ImageLoader = () => {\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item style={{padding: \"4px\"}} xs={12} md={4}><Item /></Grid>\r\n            <Grid item style={{padding: \"4px\"}} xs={12} md={4}><Item /></Grid>\r\n            <Grid item style={{padding: \"4px\"}} xs={12} md={4}><Item /></Grid>\r\n        </Grid>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\nimport { usePageLoadingContext } from 'context'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport { Grid, Typography } from '@material-ui/core'\r\nimport { FONTS_HEAD } from 'App'\r\nimport { makeStyles } from '@material-ui/styles'\r\nimport { Footer } from './Footer/Footer'\r\nimport { ImageLoader } from './Loaders.js/ImageLoader'\r\n\r\nconst infoStyles = makeStyles(theme => ({\r\n    infoContainer: {\r\n        padding: theme.spacing(1),\r\n        borderRadius: \"4px\",\r\n        overflow: \"hidden\",\r\n        transition: \"0.14s backgroundColor ease-in-out\",\r\n        \"&:hover\": {\r\n            backgroundColor: `${theme.palette.primary.dark}2f`\r\n        }\r\n    },\r\n    imazo_gal: {\r\n        \r\n    },\r\n    imazo: {\r\n        width: '100%',\r\n        height: \"240px\",\r\n        objectFit: \"contain\",\r\n        [theme.breakpoints.down('md')]: {\r\n            height: '180px',\r\n        }\r\n    },\r\n    info: {\r\n        fontFamily: FONTS_HEAD,\r\n        fontSize: '1rem',\r\n        color: `${theme.textColor.main}7f`\r\n    },\r\n    subinfo: {\r\n        fontFamily: FONTS_HEAD,\r\n        fontSize: '12px',\r\n        color: `${theme.textColor.dark}6f`       \r\n    }\r\n}))\r\n\r\nconst UserInfoCard = ({showInfo, info}) => {\r\n    const classes = infoStyles()\r\n\r\n    console.log(\"called User Card\")\r\n    console.log(info)\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6} md={3} className={classes.infoContainer}>\r\n            <img className={classes.imazo} src={info.url_path} />\r\n            {\r\n                showInfo ? <Grid container>\r\n                    <Grid item xs={12} style={{paddingTop: \"8px\"}}>\r\n                        <Typography variant=\"h6\" className={classes.info}>\r\n                            {info.user}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"subtitle1\" className={classes.subinfo}>\r\n                            {info.about_user}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"subtitle2\" className={classes.subinfo}>\r\n                            {info.phone_no}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"subtitle2\" className={classes.subinfo}>\r\n                            {info.email}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid> : null\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst InfoCard = ({showInfo, info}) => {\r\n\r\n    const classes = infoStyles()\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6} md={3} className={classes.infoContainer}>\r\n            <img className={classes.imazo} src={info.url_path} />\r\n            {\r\n                showInfo ? <Grid container>\r\n                    <Grid item xs={12} style={{paddingTop: \"8px\"}}>\r\n                        <Typography variant=\"h6\" className={classes.info}>\r\n                            {info.creator}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"subtitle1\" className={classes.subinfo}>\r\n                            {info.about_creator}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid> : null\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nconst LIMIT = 12\r\nconst STEPPER = 4\r\n\r\nconst DisplayStyle = makeStyles(theme => ({\r\n    notFound: {\r\n        color: theme.palette.grey[600],\r\n        paddingTop: theme.spacing(5),\r\n        paddingBottom: theme.spacing(5)\r\n    },\r\n    loading_display: {\r\n        fontFamily: FONTS_HEAD,\r\n        fontSize: '16px',\r\n        color: theme.palette.grey[400]\r\n    }\r\n}))\r\n\r\nexport const Displayer = ({queryObject, shouldDisplayInfo, showContactInfo}) => {\r\n\r\n    const classes = DisplayStyle()\r\n    const [hasMore, setHasMore] = useState(true)\r\n\r\n    const {data, error, loading, fetchMore} = useQuery(queryObject.query_query, {\r\n        variables: {\r\n            options: {\r\n                skip: 0,\r\n                limit: LIMIT,\r\n                type: queryObject.query_params\r\n            }\r\n        }\r\n    })\r\n    const {setLoading} = usePageLoadingContext()\r\n\r\n    console.log(data)\r\n\r\n    useEffect(() => {\r\n        if(loading === true) {\r\n            setLoading(true)\r\n        } else if(loading === false) {\r\n            setLoading(false)\r\n            if(!data || data[queryObject.query_tablename].length < LIMIT) {\r\n                setHasMore(false)\r\n            }\r\n        }\r\n    }, [loading])\r\n\r\n    let ToRender\r\n    const makeResponse = () => {\r\n\r\n        console.log(data)\r\n        if(!data){\r\n            return []\r\n        }\r\n\r\n        const items = data[queryObject.query_tablename].map((item, index) => {\r\n            return (\r\n                showContactInfo === true ?\r\n                <UserInfoCard showInfo={shouldDisplayInfo} info={item} key={index} /> :\r\n                <InfoCard showInfo={shouldDisplayInfo} info={item} key={index} />\r\n                \r\n            )\r\n        })\r\n        const result = []\r\n        for(let i = 0; i < data[queryObject.query_tablename].length; i+=STEPPER){\r\n            const ti = []\r\n            for(let j = 0; j < STEPPER && (i + j) < data[queryObject.query_tablename].length; ++j){\r\n                ti.push(items[i+j])\r\n            }\r\n            result.push(<Grid container>{ti}</Grid>)\r\n        }\r\n        \r\n        return result\r\n    }\r\n\r\n    if(loading) {\r\n        ToRender = (\r\n            <ImageLoader />\r\n        )\r\n    }\r\n    else if(error) {\r\n        ToRender = <div>Error</div>\r\n    }\r\n    else if(data) {\r\n        const response = makeResponse()\r\n\r\n        console.log(response)\r\n        if(response.length === 0){\r\n            ToRender = (\r\n                <>\r\n                <Grid container className={classes.notFound}>\r\n                    <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                        <Typography variant=\"h4\">\r\n                            -\\_(^_^)_/- <br /><br />\r\n                            Nothing Found\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                </>\r\n            )\r\n        } else {\r\n            ToRender = (\r\n                <>\r\n                    <InfiniteScroll\r\n                        dataLength={response.length}\r\n                        loader={\r\n                            <Grid container>\r\n                                <Grid item xs={12} style={{textAlign: 'center'}}>\r\n                                    <Typography className={classes.loading_display}>&bull; &bull; &bull;</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                        hasMore={hasMore}\r\n                        endMessage={<></>}\r\n                        next={() => {\r\n                            const res = data[queryObject.query_tablename].length / LIMIT\r\n                            console.log(`SKIP: ${res} | ${Math.floor(res)}`)\r\n                            return fetchMore({\r\n                            variables: {\r\n                                options: {\r\n                                    skip: res,\r\n                                    limit: LIMIT,\r\n                                    type: queryObject.query_params\r\n                                }\r\n                            }, updateQuery: (prev, { fetchMoreResult }) => {\r\n                                if (!fetchMoreResult || !hasMore) return prev;\r\n                                console.log(prev)\r\n                                console.log(queryObject)\r\n                                console.log(fetchMoreResult)\r\n                                if(fetchMoreResult[queryObject.query_tablename].length < LIMIT) {\r\n                                    setHasMore(false)\r\n                                }\r\n                                return {\r\n                                    [queryObject.query_tablename]: [\r\n                                        ...prev[queryObject.query_tablename],\r\n                                        ...fetchMoreResult[queryObject.query_tablename]\r\n                                    ]\r\n                                }\r\n                            }\r\n                        })}\r\n                    }>\r\n                        {response}\r\n                    </InfiniteScroll>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {ToRender}\r\n        </>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\nimport { usePageLoadingContext } from 'context'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport { Displayer } from 'components/Displayer'\r\nimport { Grid } from '@material-ui/core'\r\n\r\nconst ADVISORY_QUERY = gql`\r\nquery allAdvisory($options: InpOptions) {\r\n    allArts(options: $options) {\r\n        _id\r\n        creator\r\n        about_creator\r\n        url_path\r\n    }\r\n}\r\n`\r\nconst Memers = () => {\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <Displayer\r\n                    queryObject={{\r\n                        query_query: ADVISORY_QUERY,\r\n                        query_params: \"meme\",\r\n                        query_tablename: \"allArts\"\r\n                    }}\r\n                    shouldDisplayInfo={true}/>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Memers"],"sourceRoot":""}