{"version":3,"sources":["components/Displayer.js","components/Clubs/Memers.js"],"names":["infoStyles","makeStyles","theme","infoContainer","padding","spacing","borderRadius","overflow","transition","backgroundColor","palette","primary","dark","imazo","width","height","objectFit","breakpoints","down","info","fontFamily","FONTS_HEAD","fontSize","color","grey","subinfo","InfoCard","showInfo","classes","item","xs","sm","md","className","src","url_path","container","style","paddingTop","variant","creator","about_creator","DisplayStyle","notFound","paddingBottom","loading_display","Displayer","ToRender","queryObject","shouldDisplayInfo","useState","hasMore","setHasMore","useQuery","query_query","variables","options","skip","limit","type","query_params","data","error","loading","fetchMore","setLoading","usePageLoadingContext","useEffect","query_tablename","length","textAlign","response","items","allArts","map","index","key","result","i","ti","j","push","makeResponse","console","log","dataLength","loader","endMessage","next","res","Math","floor","updateQuery","prev","fetchMoreResult","ADVISORY_QUERY","gql","Memers"],"mappings":"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","file":"static/js/15.ef2c3ba6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\nimport { usePageLoadingContext } from 'context'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport { Grid, Typography } from '@material-ui/core'\r\nimport { FONTS_HEAD } from 'App'\r\nimport { makeStyles } from '@material-ui/styles'\r\nimport { Footer } from './Footer/Footer'\r\n\r\nconst infoStyles = makeStyles(theme => ({\r\n    infoContainer: {\r\n        padding: theme.spacing(1),\r\n        borderRadius: \"4px\",\r\n        overflow: \"hidden\",\r\n        transition: \"0.14s backgroundColor ease-in-out\",\r\n        \"&:hover\": {\r\n            backgroundColor: theme.palette.primary.dark\r\n        }\r\n    },\r\n    imazo: {\r\n        width: '100%',\r\n        height: \"240px\",\r\n        objectFit: \"contain\",\r\n        [theme.breakpoints.down('md')]: {\r\n            height: '180px',\r\n        }\r\n    },\r\n    info: {\r\n        fontFamily: FONTS_HEAD,\r\n        fontSize: '16px',\r\n        color: theme.palette.grey[100]\r\n    },\r\n    subinfo: {\r\n        fontFamily: FONTS_HEAD,\r\n        fontSize: '12px',\r\n        color: theme.palette.grey[400]        \r\n    }\r\n}))\r\n\r\nconst InfoCard = ({showInfo, info}) => {\r\n\r\n    const classes = infoStyles()\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6} md={3} className={classes.infoContainer}>\r\n            <img className={classes.imazo} src={info.url_path} />\r\n            {\r\n                showInfo ? <Grid container>\r\n                    <Grid item xs={12} style={{paddingTop: \"8px\"}}>\r\n                        <Typography variant=\"h6\" className={classes.info}>\r\n                            {info.creator}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"subtitle1\" className={classes.subinfo}>\r\n                            {info.about_creator}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid> : null\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nconst LIMIT = 12\r\nconst STEPPER = 4\r\n\r\nconst DisplayStyle = makeStyles(theme => ({\r\n    notFound: {\r\n        color: theme.palette.grey[600],\r\n        paddingTop: theme.spacing(5),\r\n        paddingBottom: theme.spacing(5)\r\n    },\r\n    loading_display: {\r\n        fontFamily: FONTS_HEAD,\r\n        fontSize: '16px',\r\n        color: theme.palette.grey[400]\r\n    }\r\n}))\r\n\r\nexport const Displayer = ({queryObject, shouldDisplayInfo}) => {\r\n\r\n    const classes = DisplayStyle()\r\n    const [hasMore, setHasMore] = useState(true)\r\n\r\n    const {data, error, loading, fetchMore} = useQuery(queryObject.query_query, {\r\n        variables: {\r\n            options: {\r\n                skip: 0,\r\n                limit: LIMIT,\r\n                type: queryObject.query_params\r\n            }\r\n        }\r\n    })\r\n    const {setLoading} = usePageLoadingContext()\r\n\r\n    useEffect(() => {\r\n        if(loading === true) {\r\n            setLoading(true)\r\n        } else if(loading === false) {\r\n            setLoading(false)\r\n            if(data[queryObject.query_tablename].length < LIMIT) {\r\n                setHasMore(false)\r\n            }\r\n        }\r\n    }, [loading])\r\n\r\n    let ToRender\r\n    const makeResponse = () => {\r\n        const items = data.allArts.map((item, index) => {\r\n            return (\r\n                <InfoCard showInfo={shouldDisplayInfo} info={item} key={index}/>\r\n            )\r\n        })\r\n        const result = []\r\n        for(let i = 0; i < data.allArts.length; i+=STEPPER){\r\n            const ti = []\r\n            for(let j = 0; j < STEPPER && (i + j) < data.allArts.length; ++j){\r\n                ti.push(items[i+j])\r\n            }\r\n            result.push(<Grid container>{ti}</Grid>)\r\n        }\r\n        \r\n        return result\r\n    }\r\n\r\n    if(loading) {\r\n        ToRender = (\r\n            <Grid container className={classes.notFound}>\r\n                <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                    <Typography variant=\"h4\">Loading...</Typography>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n    else if(error) {\r\n        ToRender = <div>Error</div>\r\n    }\r\n    else if(data) {\r\n        const response = makeResponse()\r\n\r\n        console.log(response)\r\n        if(response.length === 0){\r\n            ToRender = (\r\n                <>\r\n                <Grid container className={classes.notFound}>\r\n                    <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                        <Typography variant=\"h4\">\r\n                            -\\_(^_^)_/- <br /><br />\r\n                            Nothing Found\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                </>\r\n            )\r\n        } else {\r\n            ToRender = (\r\n                <>\r\n                    <InfiniteScroll\r\n                        dataLength={response.length}\r\n                        loader={\r\n                            <Grid container>\r\n                                <Grid item xs={12} style={{textAlign: 'center'}}>\r\n                                    <Typography className={classes.loading_display}>Loading</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                        hasMore={hasMore}\r\n                        endMessage={<></>}\r\n                        next={() => {\r\n                            const res = data[queryObject.query_tablename].length / LIMIT\r\n                            console.log(`SKIP: ${res} | ${Math.floor(res)}`)\r\n                            return fetchMore({\r\n                            variables: {\r\n                                options: {\r\n                                    skip: res,\r\n                                    limit: LIMIT,\r\n                                    type: queryObject.query_params\r\n                                }\r\n                            }, updateQuery: (prev, { fetchMoreResult }) => {\r\n                                if (!fetchMoreResult || !hasMore) return prev;\r\n                                console.log(prev)\r\n                                console.log(queryObject)\r\n                                console.log(fetchMoreResult)\r\n                                if(fetchMoreResult[queryObject.query_tablename].length < LIMIT) {\r\n                                    setHasMore(false)\r\n                                }\r\n                                return {\r\n                                    [queryObject.query_tablename]: [\r\n                                        ...prev[queryObject.query_tablename],\r\n                                        ...fetchMoreResult[queryObject.query_tablename]\r\n                                    ]\r\n                                }\r\n                            }\r\n                        })}\r\n                    }>\r\n                        {response}\r\n                    </InfiniteScroll>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {ToRender}\r\n        </>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\nimport { usePageLoadingContext } from 'context'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport { Displayer } from 'components/Displayer'\r\nimport { Grid } from '@material-ui/core'\r\n\r\nconst ADVISORY_QUERY = gql`\r\nquery allAdvisory($options: InpOptions) {\r\n    allArts(options: $options) {\r\n        _id\r\n        creator\r\n        about_creator\r\n        url_path\r\n    }\r\n}\r\n`\r\nconst Memers = () => {\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <Displayer\r\n                    queryObject={{\r\n                        query_query: ADVISORY_QUERY,\r\n                        query_params: \"meme\",\r\n                        query_tablename: \"allArts\"\r\n                    }}\r\n                    shouldDisplayInfo={true}/>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Memers"],"sourceRoot":""}