{"version":3,"sources":["components/Displayer.js","components/Home/AdvisoryMember.js"],"names":["infoStyles","makeStyles","theme","infoContainer","padding","spacing","borderRadius","overflow","transition","backgroundColor","palette","primary","dark","imazo","width","height","objectFit","breakpoints","down","info","fontFamily","FONTS_HEAD","fontSize","color","grey","subinfo","UserInfoCard","showInfo","classes","console","log","item","xs","sm","md","className","src","url_path","container","style","paddingTop","variant","user","about_user","phone_no","email","InfoCard","creator","about_creator","DisplayStyle","notFound","paddingBottom","loading_display","Displayer","ToRender","queryObject","shouldDisplayInfo","showContactInfo","useState","hasMore","setHasMore","useQuery","query_query","variables","options","skip","limit","type","query_params","data","error","loading","fetchMore","setLoading","usePageLoadingContext","useEffect","query_tablename","length","textAlign","response","items","map","index","key","result","i","ti","j","push","makeResponse","dataLength","loader","endMessage","next","res","Math","floor","updateQuery","prev","fetchMoreResult","ADVISORY_QUERY","gql","MemberAdvisory"],"mappings":"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","file":"static/js/18.f9a750a7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\nimport { usePageLoadingContext } from 'context'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport { Grid, Typography } from '@material-ui/core'\r\nimport { FONTS_HEAD } from 'App'\r\nimport { makeStyles } from '@material-ui/styles'\r\nimport { Footer } from './Footer/Footer'\r\n\r\nconst infoStyles = makeStyles(theme => ({\r\n    infoContainer: {\r\n        padding: theme.spacing(1),\r\n        borderRadius: \"4px\",\r\n        overflow: \"hidden\",\r\n        transition: \"0.14s backgroundColor ease-in-out\",\r\n        \"&:hover\": {\r\n            backgroundColor: theme.palette.primary.dark\r\n        }\r\n    },\r\n    imazo: {\r\n        width: '100%',\r\n        height: \"280px\",\r\n        objectFit: \"cover\",\r\n        [theme.breakpoints.down('md')]: {\r\n            height: '180px',\r\n        }\r\n    },\r\n    info: {\r\n        fontFamily: FONTS_HEAD,\r\n        fontSize: '16px',\r\n        color: theme.palette.grey[100]\r\n    },\r\n    subinfo: {\r\n        fontFamily: FONTS_HEAD,\r\n        fontSize: '12px',\r\n        color: theme.palette.grey[400]        \r\n    }\r\n}))\r\n\r\nconst UserInfoCard = ({showInfo, info}) => {\r\n    const classes = infoStyles()\r\n\r\n    console.log(\"called User Card\")\r\n    console.log(info)\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6} md={3} className={classes.infoContainer}>\r\n            <img className={classes.imazo} src={info.url_path} />\r\n            {\r\n                showInfo ? <Grid container>\r\n                    <Grid item xs={12} style={{paddingTop: \"8px\"}}>\r\n                        <Typography variant=\"h6\" className={classes.info}>\r\n                            {info.user}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"subtitle1\" className={classes.subinfo}>\r\n                            {info.about_user}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"subtitle2\" className={classes.subinfo}>\r\n                            {info.phone_no}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"subtitle2\" className={classes.subinfo}>\r\n                            {info.email}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid> : null\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst InfoCard = ({showInfo, info}) => {\r\n\r\n    const classes = infoStyles()\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6} md={3} className={classes.infoContainer}>\r\n            <img className={classes.imazo} src={info.url_path} />\r\n            {\r\n                showInfo ? <Grid container>\r\n                    <Grid item xs={12} style={{paddingTop: \"8px\"}}>\r\n                        <Typography variant=\"h6\" className={classes.info}>\r\n                            {info.creator}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"subtitle1\" className={classes.subinfo}>\r\n                            {info.about_creator}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid> : null\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nconst LIMIT = 12\r\nconst STEPPER = 4\r\n\r\nconst DisplayStyle = makeStyles(theme => ({\r\n    notFound: {\r\n        color: theme.palette.grey[600],\r\n        paddingTop: theme.spacing(5),\r\n        paddingBottom: theme.spacing(5)\r\n    },\r\n    loading_display: {\r\n        fontFamily: FONTS_HEAD,\r\n        fontSize: '16px',\r\n        color: theme.palette.grey[400]\r\n    }\r\n}))\r\n\r\nexport const Displayer = ({queryObject, shouldDisplayInfo, showContactInfo}) => {\r\n\r\n    const classes = DisplayStyle()\r\n    const [hasMore, setHasMore] = useState(true)\r\n\r\n    const {data, error, loading, fetchMore} = useQuery(queryObject.query_query, {\r\n        variables: {\r\n            options: {\r\n                skip: 0,\r\n                limit: LIMIT,\r\n                type: queryObject.query_params\r\n            }\r\n        }\r\n    })\r\n    const {setLoading} = usePageLoadingContext()\r\n\r\n    console.log(data)\r\n\r\n    useEffect(() => {\r\n        if(loading === true) {\r\n            setLoading(true)\r\n        } else if(loading === false) {\r\n            setLoading(false)\r\n            if(!data || data[queryObject.query_tablename].length < LIMIT) {\r\n                setHasMore(false)\r\n            }\r\n        }\r\n    }, [loading])\r\n\r\n    let ToRender\r\n    const makeResponse = () => {\r\n\r\n        console.log(data)\r\n        if(!data){\r\n            return []\r\n        }\r\n\r\n        const items = data[queryObject.query_tablename].map((item, index) => {\r\n            return (\r\n                showContactInfo === true ?\r\n                <UserInfoCard showInfo={shouldDisplayInfo} info={item} key={index} /> :\r\n                <InfoCard showInfo={shouldDisplayInfo} info={item} key={index} />\r\n                \r\n            )\r\n        })\r\n        const result = []\r\n        for(let i = 0; i < data[queryObject.query_tablename].length; i+=STEPPER){\r\n            const ti = []\r\n            for(let j = 0; j < STEPPER && (i + j) < data[queryObject.query_tablename].length; ++j){\r\n                ti.push(items[i+j])\r\n            }\r\n            result.push(<Grid container>{ti}</Grid>)\r\n        }\r\n        \r\n        return result\r\n    }\r\n\r\n    if(loading) {\r\n        ToRender = (\r\n            <Grid container className={classes.notFound}>\r\n                <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                    <Typography variant=\"h4\">Loading...</Typography>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n    else if(error) {\r\n        ToRender = <div>Error</div>\r\n    }\r\n    else if(data) {\r\n        const response = makeResponse()\r\n\r\n        console.log(response)\r\n        if(response.length === 0){\r\n            ToRender = (\r\n                <>\r\n                <Grid container className={classes.notFound}>\r\n                    <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                        <Typography variant=\"h4\">\r\n                            -\\_(^_^)_/- <br /><br />\r\n                            Nothing Found\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                </>\r\n            )\r\n        } else {\r\n            ToRender = (\r\n                <>\r\n                    <InfiniteScroll\r\n                        dataLength={response.length}\r\n                        loader={\r\n                            <Grid container>\r\n                                <Grid item xs={12} style={{textAlign: 'center'}}>\r\n                                    <Typography className={classes.loading_display}>Loading</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                        hasMore={hasMore}\r\n                        endMessage={<></>}\r\n                        next={() => {\r\n                            const res = data[queryObject.query_tablename].length / LIMIT\r\n                            console.log(`SKIP: ${res} | ${Math.floor(res)}`)\r\n                            return fetchMore({\r\n                            variables: {\r\n                                options: {\r\n                                    skip: res,\r\n                                    limit: LIMIT,\r\n                                    type: queryObject.query_params\r\n                                }\r\n                            }, updateQuery: (prev, { fetchMoreResult }) => {\r\n                                if (!fetchMoreResult || !hasMore) return prev;\r\n                                console.log(prev)\r\n                                console.log(queryObject)\r\n                                console.log(fetchMoreResult)\r\n                                if(fetchMoreResult[queryObject.query_tablename].length < LIMIT) {\r\n                                    setHasMore(false)\r\n                                }\r\n                                return {\r\n                                    [queryObject.query_tablename]: [\r\n                                        ...prev[queryObject.query_tablename],\r\n                                        ...fetchMoreResult[queryObject.query_tablename]\r\n                                    ]\r\n                                }\r\n                            }\r\n                        })}\r\n                    }>\r\n                        {response}\r\n                    </InfiniteScroll>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {ToRender}\r\n        </>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\nimport { usePageLoadingContext } from 'context'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport { Displayer } from '../Displayer'\r\n\r\nconst ADVISORY_QUERY = gql`\r\nquery allAdvisory($options: InpOptions) {\r\n    allUsers(options: $options) {\r\n        _id\r\n        user\r\n        about_user\r\n        phone_no\r\n        email\r\n        url_path\r\n    }\r\n}\r\n`\r\nconst MemberAdvisory = () => {\r\n    return (\r\n        <Displayer\r\n            queryObject={{\r\n                query_query: ADVISORY_QUERY,\r\n                query_params: \"teacher\",\r\n                query_tablename: \"allUsers\"\r\n            }}\r\n            shouldDisplayInfo={true}\r\n            showContactInfo={true}/>\r\n    )\r\n}\r\n\r\nexport default MemberAdvisory"],"sourceRoot":""}