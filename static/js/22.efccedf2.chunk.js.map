{"version":3,"sources":["components/Notifications/Notifications.js"],"names":["gql","makeStyles","theme","notif","padding","spacing","background","palette","primary","dark","marginTop","marginBottom","breakpoints","down","undisplay","display","notifItem","spacers","rounders","borderRadius","overflow","clickableLink","fontFamily","FONTS_HEAD","color","secondary","main","light","notFound","grey","paddingTop","paddingBottom","useStyles","Notifications","ToRender","useState","queryObject","query_params","displayNewBadge","container"],"mappings":"ggBAY0BA,IAAH,KAWHC,aAAW,SAAAC,GAAK,MAAK,CACrCC,MAAM,aACFC,QAASF,EAAMG,QAAQ,GACvBC,WAAYJ,EAAMK,QAAQC,QAAQC,KAClCC,UAAW,MACXC,aAAc,OACbT,EAAMU,YAAYC,KAAK,MAAQ,CAC5BH,UAAW,MACXC,aAAc,QAGtBG,UAAU,eACLZ,EAAMU,YAAYC,KAAK,MAAQ,CAC5BE,QAAS,SAGjBC,UAAU,aACNZ,QAASF,EAAMG,QAAQ,IACtBH,EAAMU,YAAYC,KAAK,MAAQ,CAC5BT,QAAS,IAGjBa,QAAS,CACLP,UAAWR,EAAMG,QAAQ,GACzBM,aAAcT,EAAMG,QAAQ,IAEhCa,SAAU,CACNC,aAAcjB,EAAMG,QAAQ,GAC5Be,SAAU,UAEdC,cAAe,CACXC,WAAYC,IACZC,MAAOtB,EAAMK,QAAQkB,UAAUC,KAC/B,UAAW,CACPF,MAAOtB,EAAMK,QAAQkB,UAAUE,QAGvCC,SAAU,CACNJ,MAAOtB,EAAMK,QAAQsB,KAAK,KAC1BC,WAAY5B,EAAMG,QAAQ,GAC1B0B,cAAe7B,EAAMG,QAAQ,QAnDrC,IA4KM2B,EAAY/B,aAAW,SAAAC,GAEbA,EAAMG,QAAQ,QAoBf4B,UAhBO,WAAO,IAIrBC,EAJoB,EAEYC,mBAAS,GAFrB,6BAKxBD,EAAW,kBAAC,IAAD,CAAqBE,YAAa,CAACC,aAAc,gBAAiBC,iBAAiB,IAE/EN,IAEf,OACI,kBAAC,IAAD,CAAMO,WAAS,GACVL","file":"static/js/22.efccedf2.chunk.js","sourcesContent":["import React, { useState, lazy, useEffect } from 'react'\r\nimport { Tabs } from 'components/TabsList'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\nimport { usePageLoadingContext } from 'context'\r\nimport { makeStyles, Grid, Typography, Link } from '@material-ui/core'\r\nimport { FONTS_HEAD } from 'App'\r\nimport { Footer } from 'components/Footer/Footer'\r\nimport { NotifStyleDisplayer } from 'components/NotifStylesDisplayer'\r\n\r\n\r\nconst GET_NOTIFICATIONS = gql`\r\nquery AllNotifications($options: InpOptions) {\r\n    allNotifications(options: $options){\r\n        _id\r\n        notification_text\r\n        notification_url\r\n        create_date\r\n    }\r\n}\r\n`\r\n\r\nconst notifStyles = makeStyles(theme => ({\r\n    notif: {\r\n        padding: theme.spacing(1),\r\n        background: theme.palette.primary.dark,\r\n        marginTop: '1px',\r\n        marginBottom: '1px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginTop: '4px',\r\n            marginBottom: '4px'\r\n        }\r\n    },\r\n    undisplay: {\r\n        [theme.breakpoints.down('sm')]: {\r\n            display: 'none'\r\n        }\r\n    },\r\n    notifItem: {\r\n        padding: theme.spacing(1),\r\n        [theme.breakpoints.down('sm')]: {\r\n            padding: 0\r\n        }\r\n    },\r\n    spacers: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2)\r\n    },\r\n    rounders: {\r\n        borderRadius: theme.spacing(1),\r\n        overflow: \"hidden\"\r\n    },\r\n    clickableLink: {\r\n        fontFamily: FONTS_HEAD,\r\n        color: theme.palette.secondary.main,\r\n        '&:hover': {\r\n            color: theme.palette.secondary.light\r\n        }\r\n    },\r\n    notFound: {\r\n        color: theme.palette.grey[600],\r\n        paddingTop: theme.spacing(5),\r\n        paddingBottom: theme.spacing(5)\r\n    },\r\n}))\r\n\r\n// const NotifStyleDisplayer = ({queryObject}) => {\r\n\r\n//     const classes = notifStyles()\r\n    \r\n//     const {data, loading, error, fetchMore} = useQuery(GET_NOTIFICATIONS,{\r\n//         variables: {\r\n//             options: {\r\n//                 skip: 0,\r\n//                 limit: LIMIT,\r\n//                 type: queryObject.query_params\r\n//             }\r\n//         }\r\n//     })\r\n\r\n//     const {setLoading} = usePageLoadingContext()\r\n//     const [hasMore, setHasMore] = useState(true)\r\n\r\n//     const LIMIT = 20\r\n\r\n//     useEffect(() => {\r\n//         if(loading === true){\r\n//             setLoading(true)\r\n//         } else {\r\n//             setLoading(false)\r\n//             if(data.allNotifications.length < LIMIT) {\r\n//                 setHasMore(false)\r\n//             }\r\n//         }\r\n//     }, [loading])\r\n    \r\n//     let ToRender\r\n//     if(loading){\r\n//         ToRender = (\r\n//             <Grid container>\r\n//                 <Grid item xs={12}>                    \r\n//                 </Grid>\r\n//             </Grid>\r\n//         )\r\n//     }\r\n\r\n//     else if(data) {\r\n//         if(data.allNotifications.length < 1){\r\n//             ToRender = (<>\r\n//                 <Grid container className={classes.notFound}>\r\n//                     <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n//                         <Typography variant=\"h4\">\r\n//                             -\\_(^_^)_/- <br /><br />\r\n//                             Nothing Found\r\n//                         </Typography>\r\n//                     </Grid>\r\n//                 </Grid>\r\n//                 </>)\r\n//         } else {\r\n//             ToRender = (\r\n//                 <InfiniteScroll\r\n//                     dataLength={data.allNotifications.length}\r\n//                     endMessage={<></>}\r\n//                     hasMore={hasMore}\r\n//                     next={() => fetchMore({\r\n//                         variables: {\r\n//                             options: {\r\n//                                 skip: (data.allNotifications.length % LIMIT),\r\n//                                 limit: LIMIT,\r\n//                                 type: queryObject.query_params\r\n//                             }\r\n//                         },\r\n//                         updateQuery: (prev, { fetchMoreResult }) => {\r\n//                             if (!fetchMoreResult || !hasMore) return prev;\r\n//                             console.log(prev)\r\n//                             console.log(fetchMoreResult)\r\n//                             if(fetchMoreResult.allNotifications.length < LIMIT) {\r\n//                                 setHasMore(false)\r\n//                             }\r\n//                             return {\r\n//                                 allNotifications: [\r\n//                                     ...prev.allNotifications,\r\n//                                     ...fetchMoreResult.allNotifications\r\n//                                 ]\r\n//                             }\r\n//                         }\r\n//                     })}>\r\n//                 { \r\n//                     data.allNotifications.map((item, index) => {\r\n\r\n//                         const date = new Date()\r\n//                         date.setTime(item.create_date)\r\n//                         const day = date.getUTCDate()\r\n//                         const mon = date.getMonth() + 1\r\n//                         const year = date.getFullYear()\r\n//                         const fdate = `${mon}/${day}/${year}`\r\n\r\n//                         return (\r\n//                             <Grid container className={`${classes.notif} ${classes.rounders}`} xs={12}>\r\n//                                 <Grid item className={`${classes.notifItem} ${classes.undisplay}`} xs={12} md={1} lg={1}>{index+1}</Grid>\r\n//                                 <Grid item className={classes.notifItem} xs={12} md={8} lg={9}>{item.notification_text}</Grid>\r\n//                                 <Grid item className={classes.notifItem} style={{textAlign: 'left'}} xs={12} md={2} lg={1}>{fdate}</Grid>\r\n//                                 <Grid item className={classes.notifItem} xs={12} md={1} lg={1}><Link target=\"_blank\" rel=\"noreferrer noopener\" className={classes.clickableLink} href={item.notification_url}>More</Link></Grid>\r\n//                             </Grid>\r\n//                         )\r\n//                     })\r\n//                 }\r\n//                 </InfiniteScroll>\r\n//             )\r\n//         }\r\n//     } else if(error) {\r\n//         ToRender = <div>Error Loading..</div>\r\n//     }\r\n\r\n//     return (\r\n//         <Grid container className={classes.spacers}>\r\n//             <Grid item xs={12} >\r\n//             {ToRender}\r\n//             </Grid>\r\n//         </Grid>\r\n//     )\r\n// }\r\n\r\nconst useStyles = makeStyles(theme => {\r\n    root: {\r\n        margin: theme.spacing(100)\r\n    }\r\n})\r\n\r\nconst Notifications = () => {\r\n\r\n    const [currentTab, setCurrentTab] = useState(0)\r\n\r\n    let ToRender\r\n    ToRender = <NotifStyleDisplayer queryObject={{query_params: \"notification\"}} displayNewBadge={true}/>\r\n\r\n    const styles = useStyles()\r\n\r\n    return (\r\n        <Grid container>\r\n            {ToRender}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Notifications    "],"sourceRoot":""}